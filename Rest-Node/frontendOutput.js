export const data = [
  {
    entityFiles: [
      {
        filename: "Class",
        content:
          'package com.example.demo.model;\r\n\r\nimport org.springframework.data.annotation.Id;\r\nimport org.springframework.data.mongodb.core.mapping.Document;\r\n\r\n\r\n\r\n@Document(collection = "") \r\npublic class Class {\r\n\r\n    \r\n}\r\n',
      },
    ],
    objectFile: [],
    repoFiles: [
      {
        filename: "ClassRepository",
        content:
          "package .Repository;\r\n\r\nimport org.springframework.stereotype.Repository;\r\nimport org.springframework.data.mongodb.repository.MongoRepository;\r\nimport .Model.Class;\r\n\r\n@Repository\r\npublic interface Repository extends MongoRepository<Class, String> {\r\n  \r\n  \r\n}\r\n",
      },
    ],
    serviceFiles: [
      {
        filename: "ClassService",
        content:
          "package com.example.demo.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n \r\n       import Students.Repositories.ClassRepository\r\n       import Students.Entity.Class\r\n    \r\n\r\n@Service\r\npublic class ClassService {\r\n\r\n \r\n        @Autowired \r\n     private   ClassRepository classRepository;\r\n    \r\n\r\n      \r\n       public Class saveClass(Class class) {\nreturn classRepository.save(class);\n}\r\n       public Class getClassById(String id){\nClass class = classRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Class not found&quot;));\nreturn class;\n}\r\n       public void deleteClassById(String id) {\nClass class = classRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Class not found&quot;));\n\nclassRepository.deleteById(id);\n}\r\n       public Class updateClass(String id, Class newClass) {\r\n    if (classRepository.existsById(id)) {\r\n        newClass.setId(id);\r\n        return classRepository.save(newClass);\r\n    } else {\r\n        throw new RuntimeException(&quot;Class not found&quot;);\r\n    }\r\n}\r\n    \r\n}\r\n",
      },
    ],
    controllerFiles: [
      {
        filename: "ClassController",
        content:
          'package .controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.PutMapping;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n\r\n        import Students.Service.ClassService\r\n    \r\n\r\n@RestController\r\n@RequestMapping("/api/entities")\r\npublic class ClassController {\r\n\r\n    @Autowired\r\n    private ClassService ClassService;\r\n\r\n \r\n         @Operation(summary = &quot;Save new Class&quot;, description = &quot;Create a new Class and save it to the database.&quot;)\r\n    @ApiResponses(value = {\r\n        @ApiResponse(responseCode = &quot;201&quot;, description = &quot;Class successfully created&quot;),\r\n        @ApiResponse(responseCode = &quot;400&quot;, description = &quot;Invalid input&quot;),\r\n        @ApiResponse(responseCode = &quot;500&quot;, description = &quot;Internal server error&quot;)\r\n    })\r\n    @PostMapping\r\n    public ResponseEntity&lt;?&gt; saveClass(@RequestBody Class class) {\r\n        try {\r\n            logger.info(&quot;Saving new class: {}&quot;, class);\r\n            // Save the new entity\r\n            Class savedEntity = classService.save(class);\r\n            // Return 201 status on successful save\r\n            return new ResponseEntity&lt;&gt;(savedEntity, HttpStatus.CREATED);\r\n        } catch (IllegalArgumentException e) {\r\n            // Log and handle invalid input\r\n            logger.warn(&quot;Invalid input: {}&quot;, e.getMessage());\r\n            return new ResponseEntity&lt;&gt;(&quot;Invalid input&quot;, HttpStatus.BAD_REQUEST);\r\n        } catch (Exception e) {\r\n            // Log the exception and return a 500 Internal Server Error\r\n            logger.error(&quot;Error saving new class. Error: {}&quot;, e.getMessage());\r\n            return new ResponseEntity&lt;&gt;(&quot;Internal server error&quot;, HttpStatus.INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r\n         @Operation(summary = &quot;Get Class by ID&quot;, description = &quot;Fetch a specific Class by its ID.&quot;)\r\n    @ApiResponses(value = {\r\n        @ApiResponse(responseCode = &quot;200&quot;, description = &quot;Class found and returned&quot;),\r\n        @ApiResponse(responseCode = &quot;404&quot;, description = &quot;Class not found&quot;),\r\n        @ApiResponse(responseCode = &quot;500&quot;, description = &quot;Internal server error&quot;)\r\n    })\r\n    @GetMapping(&quot;/{id}&quot;)\r\n    public ResponseEntity&lt;?&gt; getClassById(@PathVariable(&quot;id&quot;) String id) {\r\n        try {\r\n            logger.info(&quot;Fetching class with id: {}&quot;, id);\r\n            \r\n            // Fetch class by ID\r\n            Class class = classService.getClassById(id);\r\n            \r\n            // If class is found\r\n            if (class != null) {\r\n                return new ResponseEntity&lt;&gt;(class, HttpStatus.OK);\r\n            } else {\r\n                logger.warn(&quot;Class with id: {} not found&quot;, id);\r\n                return new ResponseEntity&lt;&gt;(&quot;Class not found&quot;, HttpStatus.NOT_FOUND);\r\n            }\r\n            \r\n        } catch (Exception e) {\r\n            // Log the exception and return a 500 Internal Server Error\r\n            logger.error(&quot;Error fetching class with id: {}. Error: {}&quot;, id, e.getMessage());\r\n            return new ResponseEntity&lt;&gt;(&quot;Internal server error&quot;, HttpStatus.INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r\n         @Operation(summary = &quot;Delete Class by ID&quot;, description = &quot;Delete a specific Class by its ID.&quot;)\r\n    @ApiResponses(value = {\r\n        @ApiResponse(responseCode = &quot;200&quot;, description = &quot;Class successfully deleted&quot;),\r\n        @ApiResponse(responseCode = &quot;404&quot;, description = &quot;Class not found&quot;),\r\n        @ApiResponse(responseCode = &quot;500&quot;, description = &quot;Internal server error&quot;)\r\n    })\r\n    @DeleteMapping(&quot;/{id}&quot;)\r\n    public ResponseEntity&lt;?&gt; deleteClassById(@PathVariable(&quot;id&quot;) String id) {\r\n        try {\r\n            logger.info(&quot;Deleting class with id: {}&quot;, id);\r\n            \r\n            // Attempt to delete the entity directly\r\n            classService.deleteById(id);\r\n            logger.info(&quot;Class with id: {} successfully deleted&quot;, id);\r\n            return new ResponseEntity&lt;&gt;(&quot;Class successfully deleted&quot;, HttpStatus.OK);\r\n        } catch (NoSuchElementException e) {\r\n            // Handle case where entity does not exist\r\n            logger.warn(&quot;Class with id: {} not found&quot;, id);\r\n            return new ResponseEntity&lt;&gt;(&quot;Class not found&quot;, HttpStatus.NOT_FOUND);\r\n        } catch (Exception e) {\r\n            // Log the exception and return a 500 Internal Server Error\r\n            logger.error(&quot;Error deleting class with id: {}. Error: {}&quot;, id, e.getMessage());\r\n            return new ResponseEntity&lt;&gt;(&quot;Internal server error&quot;, HttpStatus.INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r\n        @PutMapping(&quot;/{id}&quot;)\r\npublic Class updateClass(@PathVariable String id, @RequestBody Class class) {\r\n    return classService.updateClass(id, class);\r\n}\r\n    \r\n}\r\n',
      },
    ],
  },
];
